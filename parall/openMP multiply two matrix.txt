#include <iostream>
#include<vector>
#include<ctime>
#include<omp.h>

using namespace std;

const int matSize = 3;
int mat[matSize][matSize];

int main()
{
	clock_t t1, t2;
	double wt1, wt2;

	vector<int> vec;

	for (int i = 0; i < matSize; i++)
	{
		for (int j = 0; j < matSize; j++)
		{
			mat[i][j] = i + j;
		}
	}

	for (int i = 0; i < matSize; i++)
	{
		vec.push_back(i);
	}

	long sum;
	vector<int> res;

	t1 = clock();
	wt1 = omp_get_wtime();
	#pragma omp parallel for reduction(+:sum)
	{
		for (int i = 0; i < matSize; i++)
		{
			sum = 0;
			for (int j = 0; j < matSize; j++)
			{
				sum += mat[i][j] * vec[j];
			}
			res.push_back(sum);
		}
	}
	t2 = clock();
	wt2 = omp_get_wtime();


	cout << "the matrix " << endl;
	for (int i = 0; i < matSize; i++)
	{
		for (int j = 0; j < matSize; j++)
		{
			cout << mat[i][j] << "  ";
		}
		cout << endl;
	}

	cout << endl << "the vector " << endl;
	for (int i = 0; i < vec.size(); i++)
	{
		cout << vec[i] << endl;
	}

	cout << endl << "the result " << endl;
	for (int i = 0; i < res.size(); i++)
	{
		cout << res[i] << endl;
	}

	cout << "CPU time " << double(t2 - t1) / CLOCKS_PER_SEC << endl;
	cout << "wTime " << wt2 - wt1 << endl;

	return 0;
}