#include<iostream>
#include<omp.h>
#include<ctime>
using namespace std;

void main()
{
	clock_t t1, t2;
	double wt1, wt2;
	const int arraySize = 100000;
	int array[arraySize];
	int sum = 0;

	for (int i = 0; i < arraySize; i++)
	{
		array[i] = 1;
	}

	t1 = clock();
	wt1 = omp_get_wtime();
	#pragma omp parallel for reduction(+:sum)
	{
		for (int i = 0; i < arraySize; i++)
		{
			sum += array[i];
		}
	}
	t2 = clock();
	wt2 = omp_get_wtime();
	cout << "the sum of the array = " << sum << endl;
	cout << "the CPU time = " << (double)(t2 - t1) / CLOCKS_PER_SEC << endl;
	cout << "the universal time = " << wt2 - wt1 << endl;

	system("pause");
}